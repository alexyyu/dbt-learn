{"results": [{"node": {"name": "property_type_by_zipcode", "root_path": "C:\\users\\yichy\\dbt-learn", "resource_type": "model", "path": "property_type_by_zipcode.sql", "original_file_path": "models\\property_type_by_zipcode.sql", "package_name": "dbt_learn", "raw_sql": "{% set property_types = dbt_learn.get_column_values_alphabetically(\r\n   table=\"source_data.listings\",\r\n   column='property_type',\r\n   max_records=10)\r\n%}\r\n\r\n{{ log(property_types, info=True) }}\r\n\r\nselect\r\n   zipcode,\r\n   {% for property_type in property_types %}\r\n       {% set property_type_clean = property_type | lower |\r\n           replace(\" \", \"_\") | replace(\"/\", \"_\") %}\r\n\r\n       sum(case when property_type = '{{property_type}}' then 1 else 0 end)\r\n          as {{property_type_clean}}_count\r\n\r\n        {{- \",\" if not loop.last -}}\r\n\r\n   {%- endfor %}\r\n\r\n\r\nfrom source_data.listings\r\n\r\ngroup by 1\r\n\r\nlimit 100", "refs": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbt_learn.property_type_by_zipcode", "empty": false, "fqn": ["dbt_learn", "property_type_by_zipcode"], "tags": [], "config": {"enabled": true, "materialized": "view", "pre-hook": [], "post-hook": [], "tags": [], "vars": {}, "column_types": {}, "quoting": {}}, "schema": "dbt_alex", "alias": "property_type_by_zipcode", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\n\n\nselect\n   zipcode,\n   \n       \n\n       sum(case when property_type = 'Apartment' then 1 else 0 end)\n          as apartment_count,\n       \n\n       sum(case when property_type = 'Bed and breakfast' then 1 else 0 end)\n          as bed_and_breakfast_count,\n       \n\n       sum(case when property_type = 'Boutique hotel' then 1 else 0 end)\n          as boutique_hotel_count,\n       \n\n       sum(case when property_type = 'Bungalow' then 1 else 0 end)\n          as bungalow_count,\n       \n\n       sum(case when property_type = 'Camper/RV' then 1 else 0 end)\n          as camper_rv_count,\n       \n\n       sum(case when property_type = 'Castle' then 1 else 0 end)\n          as castle_count,\n       \n\n       sum(case when property_type = 'Condominium' then 1 else 0 end)\n          as condominium_count,\n       \n\n       sum(case when property_type = 'Cottage' then 1 else 0 end)\n          as cottage_count,\n       \n\n       sum(case when property_type = 'Farm stay' then 1 else 0 end)\n          as farm_stay_count,\n       \n\n       sum(case when property_type = 'Guest suite' then 1 else 0 end)\n          as guest_suite_count\n\n\nfrom source_data.listings\n\ngroup by 1\n\nlimit 100", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect\n   zipcode,\n   \n       \n\n       sum(case when property_type = 'Apartment' then 1 else 0 end)\n          as apartment_count,\n       \n\n       sum(case when property_type = 'Bed and breakfast' then 1 else 0 end)\n          as bed_and_breakfast_count,\n       \n\n       sum(case when property_type = 'Boutique hotel' then 1 else 0 end)\n          as boutique_hotel_count,\n       \n\n       sum(case when property_type = 'Bungalow' then 1 else 0 end)\n          as bungalow_count,\n       \n\n       sum(case when property_type = 'Camper/RV' then 1 else 0 end)\n          as camper_rv_count,\n       \n\n       sum(case when property_type = 'Castle' then 1 else 0 end)\n          as castle_count,\n       \n\n       sum(case when property_type = 'Condominium' then 1 else 0 end)\n          as condominium_count,\n       \n\n       sum(case when property_type = 'Cottage' then 1 else 0 end)\n          as cottage_count,\n       \n\n       sum(case when property_type = 'Farm stay' then 1 else 0 end)\n          as farm_stay_count,\n       \n\n       sum(case when property_type = 'Guest suite' then 1 else 0 end)\n          as guest_suite_count\n\n\nfrom source_data.listings\n\ngroup by 1\n\nlimit 100", "wrapped_sql": "None", "build_path": "target\\compiled\\dbt_learn\\property_type_by_zipcode.sql"}, "error": null, "skip": false, "status": "CREATE VIEW", "fail": null, "execution_time": 0.8257043361663818}], "generated_at": "2019-02-08T16:09:29.224983Z", "elapsed_time": 2.0567986965179443}